const express = require('express')
const phonesList = require("./data-service")
const app = express()
const port = 8000;
const cors = require('cors');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
const mongoose = require('mongoose');
const Phone = require('./Models/phone');


app.use(cors());
app.use(bodyParser.json());

mongoose
  .connect('mongodb+srv://shingeki:SsMl794o125DNsN2@cluster0.ha8d7.mongodb.net/PhoneApp?retryWrites=true&w=majority')
  .then(app.listen(port, () => {
  console.log(`Server phones-catalog app listening at http://localhost:${port}`)
}))
  .catch(error => console.log(error));



//GET
app.get('/phones', (req, res) => {
  setTimeout(() => {
    
    Phone.find({}, (error, phones) => {
      if (error) {
        log.error("Mongo error:", error);
        res.status(500).json({"message-error": `Error retrieving list of phones from mongo`})
      } else {
        // Return list of phones
        const phonesWithId = phones.map(element => {
            return { "id": element["_id"],
              ...element["_doc"]
            }
          });
        res.status(200).json(phonesWithId);
      }
    })

  }, 2000);
})

//GET BY ID
app.get('/phones/:id', (req, res) => {
  phoneId = req.params.id;

  setTimeout(() => {
    Phone.find({_id: phoneId}, (error, phone) => {
        if (error) {
            console.error("Mongo error:", error);
            res.status(500).json({"message-error": `Error retrieving phone ${phoneId} from mongo`})

          } else {
      
            if (phone.length == 0) {
              res.status(404).json({"message-error": `Phone with id ${phoneId} not found`});
            } else {
              res.status(200).json(phone);
            }

          }
      })

  }, 3000);
})


//POST
app.post('/phones', async (req, res) => {

  const errors = validatePhone(req.body);

  if(errors.length > 0) {
    res
    .status(400)
    .json({"message-error": errors});
  }

  const { name,manufacturer,description,color,price,imageFileName,screen,resolution,processor,ram,weight,memory,cam, } = req.body;

  const createdPhone = new Phone({
    name,
    manufacturer,
    description,
    color,
    price,
    imageFileName,
    screen,
    resolution,
    processor,
    ram,
    weight,
    memory,
    cam
  });

    try{
      const response = await createdPhone.save();
      res.status(201).json(response);
    }
    catch(error) {
      console.error("Cannot save on mongo", error);
      res.status(500).json({"message-error": `Error while saving phone on database`});
    }

});

function validatePhone(createdPhone) {
  const errors = [];
  const mandatoryFields = [
   "name", "manufacturer", "price", "imageFileName", "screen", "resolution", "ram", "memory", "cam"];

    for (let field of mandatoryFields) {
      let propertyToFillValue = createdPhone[field];
      if(!propertyToFillValue) {
        errors.push(`${field} property is required. Please check and fill this property`)
      }
    };

    if(createdPhone["id"] != null) {
      errors.push(`Id is autogenerated. Please remove it before send the request in order to not repeat id`);
    }

  return errors;
}

//DELETE
app.delete('/phones/:id', (req, res) => {
  phoneId = req.params.id;
  const phoneToUpdate = phonesList.find(phone => phone.id === phoneId);

  if(!phoneToUpdate) {
    res.status(404).json({"message-error": `Phone with id ${phoneId} not found`})
    return
  }

  const indexInPhoneArray = phonesList.indexOf(phoneToUpdate);
  phonesList.splice(indexInPhoneArray, 1);
  res.status(200).json({"message-success": "Deleted phone"})
})